{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rodol\\\\OneDrive\\\\Documentos\\\\pryclaremm\\\\frontend\\\\src\\\\pages\\\\Registro.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Registro = () => {\n  _s();\n  const navigate = useNavigate(); // Inicializamos navigate\n\n  const [formData, setFormData] = useState({\n    nombre: '',\n    apellidos: '',\n    correo: '',\n    password: '',\n    telefono: '',\n    ciudad: '',\n    colonia: '',\n    calle: ''\n  });\n  const [passwordStrength, setPasswordStrength] = useState('');\n  const [passwordSuggestions, setPasswordSuggestions] = useState([]);\n  const [errors, setErrors] = useState({});\n  const [successMessage, setSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const handlePasswordChange = e => {\n    const value = e.target.value;\n    if (value.length > 16) {\n      setErrorMessage('La contraseña no debe tener más de 16 caracteres.');\n      return;\n    }\n    setFormData({\n      ...formData,\n      password: value\n    });\n    setPasswordStrength(checkPasswordStrength(value));\n  };\n  const checkPasswordStrength = password => {\n    let strength = 0;\n    const suggestions = [];\n    if (password.length >= 8) {\n      strength++;\n    } else {\n      suggestions.push('Debe tener al menos 8 caracteres');\n    }\n    if (/[A-Z]/.test(password)) {\n      strength++;\n    } else {\n      suggestions.push('Debe incluir al menos una letra mayúscula');\n    }\n    if (/[a-z]/.test(password)) {\n      strength++;\n    } else {\n      suggestions.push('Debe incluir al menos una letra minúscula');\n    }\n    if (/[0-9]/.test(password)) {\n      strength++;\n    } else {\n      suggestions.push('Debe incluir al menos un número');\n    }\n    if (/[\\W]/.test(password)) {\n      strength++;\n    } else {\n      suggestions.push('Debe incluir al menos un carácter especial');\n    }\n    setPasswordSuggestions(suggestions);\n    if (strength <= 2) return 'Débil';\n    if (strength === 3) return 'Medio';\n    if (strength >= 4) return 'Fuerte';\n  };\n  const validate = () => {\n    let newErrors = {};\n    const nameRegex = /^[A-Za-zÁÉÍÓÚáéíóúÑñÜü\\s]+$/;\n    if (!formData.nombre.trim() || !nameRegex.test(formData.nombre)) {\n      newErrors.nombre = 'El nombre solo debe contener letras, espacios y caracteres válidos (á, é, í, ó, ú, ñ)';\n    }\n    if (!formData.apellidos.trim() || !nameRegex.test(formData.apellidos)) {\n      newErrors.apellidos = 'Los apellidos solo deben contener letras, espacios y caracteres válidos (á, é, í, ó, ú, ñ)';\n    }\n    if (!/\\S+@\\S+\\.\\S+/.test(formData.correo)) {\n      newErrors.correo = 'Correo inválido';\n    }\n    if (!formData.password || formData.password.length < 8) {\n      newErrors.password = 'La contraseña debe tener al menos 8 caracteres';\n    }\n    const phoneRegex = /^\\d{10}$/;\n    if (!phoneRegex.test(formData.telefono)) {\n      newErrors.telefono = 'El número de teléfono debe contener exactamente 10 dígitos';\n    }\n    if (!formData.ciudad.trim()) newErrors.ciudad = 'Ciudad es requerida';\n    if (!formData.colonia.trim()) newErrors.colonia = 'Colonia es requerida';\n    if (!formData.calle.trim()) newErrors.calle = 'Calle es requerida';\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (validate()) {\n      try {\n        const response = await fetch('http://localhost:5000/api/users/register', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(formData)\n        });\n        const result = await response.json();\n        if (response.ok) {\n          setSuccessMessage('Usuario registrado exitosamente.');\n          setErrorMessage('');\n          setFormData({\n            nombre: '',\n            apellidos: '',\n            correo: '',\n            password: '',\n            telefono: '',\n            ciudad: '',\n            colonia: '',\n            calle: ''\n          });\n\n          // Redirigir al inicio de sesión después de un breve retraso\n          setTimeout(() => navigate('/login'), 2000);\n        } else {\n          setSuccessMessage('');\n          setErrorMessage(result.message || 'Error al registrar usuario.');\n        }\n      } catch (error) {\n        setErrorMessage('Error de red al registrar.');\n        setSuccessMessage('');\n        console.error('Error al registrar:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"register-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Registro\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"success-message\",\n      children: successMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 26\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"register-form\",\n      onSubmit: handleSubmit,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Registrar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(Registro, \"noyEejtqSMP6m78jJ6fsM4NxaDE=\", false, function () {\n  return [useNavigate];\n});\n_c = Registro;\nexport default Registro;\nvar _c;\n$RefreshReg$(_c, \"Registro\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","Registro","_s","navigate","formData","setFormData","nombre","apellidos","correo","password","telefono","ciudad","colonia","calle","passwordStrength","setPasswordStrength","passwordSuggestions","setPasswordSuggestions","errors","setErrors","successMessage","setSuccessMessage","errorMessage","setErrorMessage","handlePasswordChange","e","value","target","length","checkPasswordStrength","strength","suggestions","push","test","validate","newErrors","nameRegex","trim","phoneRegex","Object","keys","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","result","json","ok","setTimeout","message","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","_c","$RefreshReg$"],"sources":["C:/Users/rodol/OneDrive/Documentos/pryclaremm/frontend/src/pages/Registro.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nconst Registro = () => {\n  const navigate = useNavigate(); // Inicializamos navigate\n\n  const [formData, setFormData] = useState({\n    nombre: '',\n    apellidos: '',\n    correo: '',\n    password: '',\n    telefono: '',\n    ciudad: '',\n    colonia: '',\n    calle: '',\n  });\n\n  const [passwordStrength, setPasswordStrength] = useState('');\n  const [passwordSuggestions, setPasswordSuggestions] = useState([]);\n  const [errors, setErrors] = useState({});\n  const [successMessage, setSuccessMessage] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handlePasswordChange = (e) => {\n    const value = e.target.value;\n\n    if (value.length > 16) {\n      setErrorMessage('La contraseña no debe tener más de 16 caracteres.');\n      return;\n    }\n\n    setFormData({ ...formData, password: value });\n    setPasswordStrength(checkPasswordStrength(value));\n  };\n\n  const checkPasswordStrength = (password) => {\n    let strength = 0;\n    const suggestions = [];\n\n    if (password.length >= 8) {\n      strength++;\n    } else {\n      suggestions.push('Debe tener al menos 8 caracteres');\n    }\n    if (/[A-Z]/.test(password)) {\n      strength++;\n    } else {\n      suggestions.push('Debe incluir al menos una letra mayúscula');\n    }\n    if (/[a-z]/.test(password)) {\n      strength++;\n    } else {\n      suggestions.push('Debe incluir al menos una letra minúscula');\n    }\n    if (/[0-9]/.test(password)) {\n      strength++;\n    } else {\n      suggestions.push('Debe incluir al menos un número');\n    }\n    if (/[\\W]/.test(password)) {\n      strength++;\n    } else {\n      suggestions.push('Debe incluir al menos un carácter especial');\n    }\n\n    setPasswordSuggestions(suggestions);\n    if (strength <= 2) return 'Débil';\n    if (strength === 3) return 'Medio';\n    if (strength >= 4) return 'Fuerte';\n  };\n\n  const validate = () => {\n    let newErrors = {};\n    const nameRegex = /^[A-Za-zÁÉÍÓÚáéíóúÑñÜü\\s]+$/;\n\n    if (!formData.nombre.trim() || !nameRegex.test(formData.nombre)) {\n      newErrors.nombre = 'El nombre solo debe contener letras, espacios y caracteres válidos (á, é, í, ó, ú, ñ)';\n    }\n    if (!formData.apellidos.trim() || !nameRegex.test(formData.apellidos)) {\n      newErrors.apellidos = 'Los apellidos solo deben contener letras, espacios y caracteres válidos (á, é, í, ó, ú, ñ)';\n    }\n\n    if (!/\\S+@\\S+\\.\\S+/.test(formData.correo)) {\n      newErrors.correo = 'Correo inválido';\n    }\n\n    if (!formData.password || formData.password.length < 8) {\n      newErrors.password = 'La contraseña debe tener al menos 8 caracteres';\n    }\n\n    const phoneRegex = /^\\d{10}$/;\n    if (!phoneRegex.test(formData.telefono)) {\n      newErrors.telefono = 'El número de teléfono debe contener exactamente 10 dígitos';\n    }\n\n    if (!formData.ciudad.trim()) newErrors.ciudad = 'Ciudad es requerida';\n    if (!formData.colonia.trim()) newErrors.colonia = 'Colonia es requerida';\n    if (!formData.calle.trim()) newErrors.calle = 'Calle es requerida';\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    if (validate()) {\n      try {\n        const response = await fetch('http://localhost:5000/api/users/register', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(formData),\n        });\n\n        const result = await response.json();\n\n        if (response.ok) {\n          setSuccessMessage('Usuario registrado exitosamente.');\n          setErrorMessage('');\n          setFormData({\n            nombre: '',\n            apellidos: '',\n            correo: '',\n            password: '',\n            telefono: '',\n            ciudad: '',\n            colonia: '',\n            calle: '',\n          });\n\n          // Redirigir al inicio de sesión después de un breve retraso\n          setTimeout(() => navigate('/login'), 2000);\n        } else {\n          setSuccessMessage('');\n          setErrorMessage(result.message || 'Error al registrar usuario.');\n        }\n      } catch (error) {\n        setErrorMessage('Error de red al registrar.');\n        setSuccessMessage('');\n        console.error('Error al registrar:', error);\n      }\n    }\n  };\n\n  return (\n    <div className=\"register-container\">\n      <h1>Registro</h1>\n      {successMessage && <p className=\"success-message\">{successMessage}</p>}\n      {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n      <form className=\"register-form\" onSubmit={handleSubmit}>\n        {/* Input fields go here */}\n        <button type=\"submit\">Registrar</button>\n      </form>\n    </div>\n  );\n};\n\nexport default Registro;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}